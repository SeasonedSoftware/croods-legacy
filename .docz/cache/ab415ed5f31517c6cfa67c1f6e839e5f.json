{"remainingRequest":"/Users/milesdavis/workspace/croods/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/preset-env\",{\"modules\":false}],\"@babel/preset-react\",\"@babel/preset-flow\",\"@babel/preset-typescript\",[\"/Users/milesdavis/workspace/croods/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"syntax-async-functions\",\"transform-async-to-generator\",\"transform-regenerator\",\"@babel/plugin-transform-runtime\",\"@babel/plugin-proposal-function-bind\",\"@babel/external-helpers\",[\"/Users/milesdavis/workspace/croods/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/milesdavis/workspace/croods/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/milesdavis/workspace/croods/src/parseError.js","dependencies":[{"path":"/Users/milesdavis/workspace/croods/src/parseError.js","mtime":1545044906000},{"path":"/Users/milesdavis/workspace/croods/node_modules/cache-loader/dist/cjs.js","mtime":1547833067000},{"path":"/Users/milesdavis/workspace/croods/node_modules/babel-loader/lib/index.js","mtime":1547833067000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport humps from 'lodash-humps';\nimport isArray from 'lodash/isArray';\nimport head from 'lodash/head';\nimport uniq from 'lodash/uniq';\nimport lowerCase from 'lodash/lowerCase';\nimport snakeCase from './snakeCase';\n\nvar parseJSError = function parseJSError(error) {\n  var name = error.name,\n      message = error.message;\n\n  if (message.match(/NetworkError/)) {\n    return {\n      id: 'NetworkError',\n      message: 'Não foi possível se contectar ao servidor. Tente novamente em alguns minutos.'\n    };\n  }\n\n  return {\n    id: humps(name),\n    message: message\n  };\n};\n\nvar parseObject = function parseObject(error) {\n  var id = error.id,\n      message = error.message;\n\n  if (!message) {\n    return {\n      id: 'unknownError',\n      message: 'Ooops, there was an error.'\n    };\n  }\n\n  if (!id) {\n    return {\n      id: message,\n      message: message\n    };\n  }\n\n  return error;\n};\n\nvar parseErrorArray = function parseErrorArray(error) {\n  var messages = error.errors.fullMessages || error.errors;\n  var message = isArray(messages) ? head(uniq(messages)) : messages;\n  return {\n    id: error.id || error.errors.id || snakeCase(lowerCase(message)),\n    message: message,\n    error: error\n  };\n};\n\nvar parseError = function parseError(error) {\n  if (error instanceof Error) {\n    return parseJSError(error);\n  }\n\n  if (typeof error === 'string') {\n    return {\n      id: error,\n      message: error\n    };\n  }\n\n  if (error.errors) {\n    return parseErrorArray(error);\n  }\n\n  return parseObject(error);\n};\n\nvar _default = parseError;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(parseJSError, \"parseJSError\", \"/Users/milesdavis/workspace/croods/src/parseError.js\");\n  reactHotLoader.register(parseObject, \"parseObject\", \"/Users/milesdavis/workspace/croods/src/parseError.js\");\n  reactHotLoader.register(parseErrorArray, \"parseErrorArray\", \"/Users/milesdavis/workspace/croods/src/parseError.js\");\n  reactHotLoader.register(parseError, \"parseError\", \"/Users/milesdavis/workspace/croods/src/parseError.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/milesdavis/workspace/croods/src/parseError.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/milesdavis/workspace/croods/src/parseError.js"],"names":["humps","isArray","head","uniq","lowerCase","snakeCase","parseJSError","error","name","message","match","id","parseObject","parseErrorArray","messages","errors","fullMessages","parseError","Error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA,MACpBC,IADoB,GACFD,KADE,CACpBC,IADoB;AAAA,MACdC,OADc,GACFF,KADE,CACdE,OADc;;AAG5B,MAAIA,OAAO,CAACC,KAAR,CAAc,cAAd,CAAJ,EAAmC;AACjC,WAAO;AACLC,MAAAA,EAAE,EAAE,cADC;AAELF,MAAAA,OAAO,EACL;AAHG,KAAP;AAKD;;AAED,SAAO;AACLE,IAAAA,EAAE,EAAEX,KAAK,CAACQ,IAAD,CADJ;AAELC,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CAfD;;AAiBA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAAAL,KAAK,EAAI;AAAA,MACnBI,EADmB,GACHJ,KADG,CACnBI,EADmB;AAAA,MACfF,OADe,GACHF,KADG,CACfE,OADe;;AAG3B,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO;AACLE,MAAAA,EAAE,EAAE,cADC;AAELF,MAAAA,OAAO,EAAE;AAFJ,KAAP;AAID;;AAED,MAAI,CAACE,EAAL,EAAS;AACP,WAAO;AAAEA,MAAAA,EAAE,EAAEF,OAAN;AAAeA,MAAAA,OAAO,EAAPA;AAAf,KAAP;AACD;;AAED,SAAOF,KAAP;AACD,CAfD;;AAiBA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAAAN,KAAK,EAAI;AAC/B,MAAMO,QAAQ,GAAGP,KAAK,CAACQ,MAAN,CAAaC,YAAb,IAA6BT,KAAK,CAACQ,MAApD;AACA,MAAMN,OAAO,GAAGR,OAAO,CAACa,QAAD,CAAP,GAAoBZ,IAAI,CAACC,IAAI,CAACW,QAAD,CAAL,CAAxB,GAA2CA,QAA3D;AACA,SAAO;AACLH,IAAAA,EAAE,EAAEJ,KAAK,CAACI,EAAN,IAAYJ,KAAK,CAACQ,MAAN,CAAaJ,EAAzB,IAA+BN,SAAS,CAACD,SAAS,CAACK,OAAD,CAAV,CADvC;AAELA,IAAAA,OAAO,EAAPA,OAFK;AAGLF,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD,CARD;;AAUA,IAAMU,UAAU,GAAG,SAAbA,UAAa,CAAAV,KAAK,EAAI;AAC1B,MAAIA,KAAK,YAAYW,KAArB,EAA4B;AAC1B,WAAOZ,YAAY,CAACC,KAAD,CAAnB;AACD;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO;AACLI,MAAAA,EAAE,EAAEJ,KADC;AAELE,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID;;AAED,MAAIA,KAAK,CAACQ,MAAV,EAAkB;AAChB,WAAOF,eAAe,CAACN,KAAD,CAAtB;AACD;;AAED,SAAOK,WAAW,CAACL,KAAD,CAAlB;AACD,CAjBD;;eAmBeU,U;AAAf;;;;;;;;;;;;0BA/DMX,Y;0BAiBAM,W;0BAiBAC,e;0BAUAI,U","sourcesContent":["import humps from 'lodash-humps'\nimport isArray from 'lodash/isArray'\nimport head from 'lodash/head'\nimport uniq from 'lodash/uniq'\nimport lowerCase from 'lodash/lowerCase'\n\nimport snakeCase from './snakeCase'\n\nconst parseJSError = error => {\n  const { name, message } = error\n\n  if (message.match(/NetworkError/)) {\n    return {\n      id: 'NetworkError',\n      message:\n        'Não foi possível se contectar ao servidor. Tente novamente em alguns minutos.',\n    }\n  }\n\n  return {\n    id: humps(name),\n    message,\n  }\n}\n\nconst parseObject = error => {\n  const { id, message } = error\n\n  if (!message) {\n    return {\n      id: 'unknownError',\n      message: 'Ooops, there was an error.',\n    }\n  }\n\n  if (!id) {\n    return { id: message, message }\n  }\n\n  return error\n}\n\nconst parseErrorArray = error => {\n  const messages = error.errors.fullMessages || error.errors\n  const message = isArray(messages) ? head(uniq(messages)) : messages\n  return {\n    id: error.id || error.errors.id || snakeCase(lowerCase(message)),\n    message,\n    error,\n  }\n}\n\nconst parseError = error => {\n  if (error instanceof Error) {\n    return parseJSError(error)\n  }\n\n  if (typeof error === 'string') {\n    return {\n      id: error,\n      message: error,\n    }\n  }\n\n  if (error.errors) {\n    return parseErrorArray(error)\n  }\n\n  return parseObject(error)\n}\n\nexport default parseError\n"]}]}